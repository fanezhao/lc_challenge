    class Solution {

        /**
         * 个人思路：
         * 首先，由于数组有序，当target大于数据最大值时，插入的位置肯定就数组的最后一位的后面，也就是nums.length - 1
         * 然后采用二分法。当nums[middle] < target时，start = middle + 1；反之，end = middle。
         *
         * @param nums
         * @param target
         * @return
         */
        public int searchInsert(int[] nums, int target) {
            int start = 0;
            int end = nums.length - 1;
            while (start < end) {
                int middle = start + end - 1;
                if (nums[middle] < target) {
                    start = middle + 1;
                } else {
                    end = middle;
                }
            }
            return nums[start] < target ? start + 1 : start;
        }
    }

//runtime:0 ms
//memory:40.9 MB
